{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Route Service",
    "version": "2023-05-31-preview",
    "description": "Azure Maps Route REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "AADToken": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts.",
      "scopes": {
        "https://atlas.microsoft.com/.default": "https://atlas.microsoft.com/.default"
      }
    },
    "SharedKey": {
      "type": "apiKey",
      "description": "This is a shared key that is provisioned when you [Create an Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account) in the Azure portal or using PowerShell, CLI, Azure SDKs, or REST API.\n\n With this key, any application can access all REST API. In other words, this key can be used as a master key in the account that they are issued in.\n\n For publicly exposed applications, our recommendation is to use the [confidential client applications](https://docs.microsoft.com/azure/azure-maps/authentication-best-practices#confidential-client-applications) approach to access Azure Maps REST APIs so your key can be securely stored.",
      "name": "subscription-key",
      "in": "query"
    },
    "SasToken": {
      "type": "apiKey",
      "description": "This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n\n With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.\n\n For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.",
      "name": "SAS Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AADToken": [
        "https://atlas.microsoft.com/.default"
      ]
    },
    {
      "SharedKey": []
    },
    {
      "SasToken": []
    }
  ],
  "responses": {},
  "parameters": {
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API.",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "2023-05-31-preview",
      "x-ms-parameter-location": "client"
    },
    "Accept-Language": {
      "name": "Accept-Language",
      "in": "header",
      "description": "Language in which routing results should be returned. \n\nPlease refer to [Supported Languages](https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/supported-culture-codes) for details.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "client"
    },
    "Report": {
      "name": "report",
      "in": "query",
      "description": "Specifies which data should be reported for diagnosis purposes. The only possible value is _effectiveSettings_. Reports the effective parameters or data used when calling the API. In the case of defaulted parameters the default will be reflected where the parameter was not specified by the caller.",
      "type": "string",
      "x-ms-parameter-location": "method",
      "enum": [
        "effectiveSettings"
      ],
      "x-ms-enum": {
        "name": "Report",
        "modelAsString": true,
        "values": [
          {
            "value": "effectiveSettings",
            "description": "Reports the effective parameters or data used when calling the API."
          }
        ]
      }
    },
    "BatchId": {
      "name": "batchId",
      "x-ms-client-name": "batchId",
      "description": "Batch id for querying the operation.",
      "type": "string",
      "in": "path",
      "required": true,
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/route/directions": {
      "post": {
        "description": "**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\n\nReturns a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.\n\n",
        "operationId": "Route_PostRouteDirections",
        "x-ms-client-name": "Route_PostRouteDirections",
        "x-ms-examples": {
          "Successfully retrieve a route between an origin and a destination with additional parameters in the body": {
            "$ref": "./examples/PostRouteDirections.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          },
          {
            "name": "RouteDirectionsRequest",
            "in": "body",
            "description": "Request body of RouteDirections API in JSON format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteDirectionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteDirectionsResponse"
            }
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    },
    "/route/directions:batch": {
      "post": {
        "description": "**Route Directions Batch API**\n\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\n\n\nThe Route Directions Batch API sends batches of queries to [Route Directions API](https://docs.microsoft.com/rest/api/maps/route/postroutedirections) using just a single API call. You can call Route Directions Batch API to run either asynchronously (async) or synchronously (sync). The async API allows caller to batch up to **700** queries and sync API up to **100** queries.\n### Submit Asynchronous Batch Request\nThe Asynchronous API is appropriate for processing big volumes of relatively complex route requests\n- It allows the retrieval of results in a separate call (multiple downloads are possible).\n- The asynchronous API is optimized for reliability and is not expected to run into a timeout.\n- The number of batch items is limited to **700** for this API.\n\nWhen you make a request by using async request, by default the service returns a 202 response code along a redirect URL in the Location field of the response header. This URL should be checked periodically until the response data or error information is available.\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if used after the expiration period.\n\nPlease note that asynchronous batch request is a long-running request. Here's a typical sequence of operations:\n1. Client sends a Route Directions Batch `POST` request to Azure Maps\n2. The server will respond with one of the following:\n\n    > HTTP `202 Accepted` - Batch request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to download the results of the batch request.\n    This status URI looks like following:\n\n``` GET https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0 ```\nNote:- Please remember to add AUTH information (subscription-key/azure_auth - See [Security](#security)) to the _status URI_ before running it. <br>\n4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.\n\n### POST Body for Batch Request\nTo send the _route directions_ queries you will use a `POST` request where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a sample request body containing 3 _route directions_ queries:\n\n\n```json\n{\n    \"batchItems\": [\n        { \"query\": \"?query=47.620659,-122.348934:47.610101,-122.342015&travelMode=bicycle&routeType=eco&traffic=false\" },\n        { \"query\": \"?query=40.759856,-73.985108:40.771136,-73.973506&travelMode=pedestrian&routeType=shortest\" },\n        { \"query\": \"?query=48.923159,-122.557362:32.621279,-116.840362\" }\n    ]\n}\n```\n\nA _route directions_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version and subscription-key. It can accept any of the supported _route directions_ [URI parameters](https://docs.microsoft.com/rest/api/maps/route/getroutedirections#uri-parameters). The string values in the _route directions_ query must be properly escaped (e.g. \" character should be escaped with \\\\ ) and it should also be properly URL-encoded.\n\n\nThe async API allows caller to batch up to **700** queries and sync API up to **100** queries, and the batch should contain at least **1** query.\n\n\n### Download Asynchronous Batch Results\nTo download the async batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:\n\n```\nhttps://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}\n```\nHere's the typical sequence of operations for downloading the batch results:\n1. Client sends a `GET` request using the _download URL_.\n2. The server will respond with one of the following:\n    \n    > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.\n\n    > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.\n\n\n\n### Batch Response Model\nThe returned data content is similar for async and sync requests. When downloading the results of an async batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch response also includes a `batchItems` array which contains a response for each and every query in the batch request. The `batchItems` will contain the results in the exact same order the original queries were sent in the batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following types:\n\n  - [`RouteDirections`](https://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections) - If the query completed successfully.\n\n  - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.\n\n\nHere's a sample Batch Response with 1 _successful_ and 1 _failed_ result:\n\n\n```json\n{\n    \"summary\": {\n        \"successfulRequests\": 1,\n        \"totalRequests\": 2\n    },\n    \"batchItems\": [\n        {\n            \"statusCode\": 200,\n            \"response\": {\n                \"routes\": [\n                    {\n                        \"summary\": {\n                            \"lengthInMeters\": 1758,\n                            \"travelTimeInSeconds\": 387,\n                            \"trafficDelayInSeconds\": 0,\n                            \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                            \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                        },\n                        \"legs\": [\n                            {\n                                \"summary\": {\n                                    \"lengthInMeters\": 1758,\n                                    \"travelTimeInSeconds\": 387,\n                                    \"trafficDelayInSeconds\": 0,\n                                    \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                    \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                },\n                                \"points\": [\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.34892\n                                    },\n                                    {\n                                        \"latitude\": 47.62094,\n                                        \"longitude\": -122.3485\n                                    },\n                                    {\n                                        \"latitude\": 47.62095,\n                                        \"longitude\": -122.3476\n                                    }\n                                ]\n                            }\n                        ],\n                        \"sections\": [\n                            {\n                                \"startPointIndex\": 0,\n                                \"endPointIndex\": 40,\n                                \"sectionType\": \"TRAVEL_MODE\",\n                                \"travelMode\": \"bicycle\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n        {\n            \"statusCode\": 400,\n            \"response\":\n            {\n                \"error\":\n                {\n                    \"code\": \"400 BadRequest\",\n                    \"message\": \"Bad request: one or more parameters were incorrectly specified or are mutually exclusive.\"\n                }\n            }\n        }\n    ]\n}\n```",
        "operationId": "Route_PostRouteDirectionsBatch",
        "x-ms-client-name": "Route_PostRouteDirectionsBatch",
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "original-uri"
        },
        "x-ms-examples": {
          "Successfully retrieve the status for the route calculation batch request": {
            "$ref": "./examples/PostRouteDirectionsBatch.json"
          }
        },
        "parameters": [
          {
            "$ref": "../../../Common/preview/1.0/common.json#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "name": "routeDirectionsBatchRequest",
            "in": "body",
            "description": "The list of route directions queries/requests to process. The list can contain a max of 700 queries for async and 100 queries for sync version and must contain at least 1 query.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch request successfully processed. The response body contains all the batch results.",
            "schema": {
              "$ref": "#/definitions/RouteDirectionsBatchResponse"
            }
          },
          "408": {
            "description": "Timeout: The request took longer to finish than the maximum amount of time defined in the api.",
            "schema": {
              "$ref": "../../../../../common-types/data-plane/v1/types.json#/definitions/ErrorResponse"
            },
            "x-ms-error-response": true
          },
          "default": {
            "$ref": "../../../Common/preview/1.0/common.json#/responses/default"
          }
        }
      }
    }
  },
  "definitions": {
    "RouteDirectionsRequest": {
      "description": "This object contains parameters to call CalculateRoute",
      "type": "object",
      "required": ["waypoints"],
      "properties": {
        "waypoints": {
          "description": "waypoints array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Waypoint"
          }
        },
        "travelMode": {
          "description": "The mode of travel for the requested route.",
          "type": "string",
          "default": "driving",
          "enum": [
            "driving",
            "truck",
            "walking"
          ],
          "x-ms-enum": {
            "name": "TravelMode",
            "modelAsString": true,
            "values": [
              {
                "value": "driving",
                "description": "The returned routes are optimized for common driving scenarios."
              },
              {
                "value": "truck",
                "description": "The returned routes are optimized for trucks."
              },
              {
                "value": "walking",
                "description": "The returned routes are optimized for pedestrians, including the use of sidewalks."
              }
            ]
          }
        },
        "departAt": {
          "description": "The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).",
          "type": "string",
          "format": "date-time"
        },
        "arriveAt": {
          "description": "The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt.",
          "type": "string",
          "format": "date-time"
        },
        "routeOptimization": {
          "description": "Specifies what parameters to use to optimize the route.",
          "type": "string",
          "default": "fastestWithoutTraffic",
          "enum": [
            "shortest",
            "fastestWithoutTraffic",
            "fatestAvoidClosureWithoutTraffic",
            "fastestWithTraffic"
          ],
          "x-ms-enum": {
            "name": "RouteOptimization",
            "modelAsString": true,
            "values": [
              {
                "value": "shortest",
                "name": "Shortest",
                "description": "The route is calculated to minimize the distance. Traffic information is not used."
              },
              {
                "value": "fastestWithoutTraffic",
                "name": "FastestWithoutTraffic",
                "description": "The route is calculated to minimize the time. Traffic information is not used."
              },
              {
                "value": "fatestAvoidClosureWithoutTraffic",
                "name": "FastestAvoidClosureWithoutTraffic",
                "description": "The route is calculated to minimize the time and avoid road closures. Traffic information except road closures are not used in the calculation."
              },
              {
                "value": "fastestWithTraffic",
                "name": "FastestWithTraffic",
                "description": "The route is calculated to minimize the time and uses current traffic information."
              }
            ]
          }
        },
        "optimizeWaypointOrder": {
          "description": "Re-order the route waypoints using a fast heuristic algorithm to reduce the route length. Yields best results when used in conjunction with optimize _shortest_. Notice that origin and destination are excluded from the optimized waypoint indices. To include origin and destination in the response, please increase all the indices by 1 to account for the origin, and then add the destination as the final index. Possible values are true or false. True computes a better order if possible, but is not allowed to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints. False will use the waypoints in the given order and not allowed to be used in conjunction with routeRepresentation _none_. `Note`:This parameter is only available for the driving and Truck mode.",
          "type": "boolean",
          "default": false
        },
        "avoid": {
          "description": "Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple items, for example, '\"avoid\": [\"highways\", \"tollRoads\"]'. Noted that minimizeHighways/minimizeTollRoads/borderCrossing are not supported when travelMode=truck.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "highways",
              "tollRoads",
              "ferries",
              "minimizeHighways",
              "minimizeTollRoads",
              "tunnels",
              "borderCrossings"
            ],
            "x-ms-enum": {
              "name": "Avoid",
              "modelAsString": true,
              "values": [
                {
                  "value": "highways",
                  "description": "Avoids the use of highways in the route.  `Note`:The parameter is available only for Driving and Walking travel mode"
                },
                {
                  "value": "tollRoads",
                  "description": "Avoids the use of toll roads in the route"
                },
                {
                  "value": "ferries",
                  "description": "Avoids the use of ferries in the route."
                },
                {
                  "value": "minimizeHighways",
                  "description": "Minimizes (tries to avoid) the use of highways in the route. Note: If you specify more than one option for a road type, then the most restrictive option is used. For example, if you set the avoid parameter to both highways and minimizeHighways, the highways option is used and all highways are avoided. `Note`:The parameter is available only for Driving and Walking travel mode"
                },
                {
                  "value": "minimizeTollRoads",
                  "description": "Minimizes (tries to avoid) the use of toll roads in the route. Note: If you specify more than one option for a road type, then the most restrictive option is used. For example, if you set the avoid parameter to both tollRoads and minimizeTollRoads, the tollRoads option is used and all toll roads are avoided."
                },
                {
                  "value": "tunnels",
                  "description": "Avoids the use of tunnels in the route. `Note`:The parameter is available only for Truck travel mode"
                },
                {
                  "value": "borderCrossings",
                  "description": "Avoids crossing country borders in the route."
                }
              ]
            }
          }
        },
        "routeOutputOptions": {
          "description": "Information of route being returned. Can specify multiple values such as \"routeOptions\": [\"includeRoutePath\", \"excludeDetailedInstructions\"].",
          "type": "array",
          "default": ["includeRoutePath","excludeItinerary"],
          "items": {
            "type": "string",
            "enum": [
              "includeRoutePath",
              "includeRegionTravelSummary",
              "excludeItinerary",
              "excludeDetailedInstructions",
              "RouteSummariesOnly"
            ],
            "x-ms-enum": {
              "name": "RouteOutputOption",
              "modelAsString": true,
              "values": [
                {
                  "value": "excludeItinerary",
                  "description": "Do not include detailed directions in the response. Detailed directions are provided as itinerary items and contain details such as written instructions and traffic location codes."
                },
                {
                  "value": "excludeDetailedInstructions",
                  "description": "Do not include detailed directions in the response in the itinerary items."
                },
                {
                  "value": "routePath",
                  "description": "Include a set of point (latitude and longitude) values that describe the route’s path in the response."
                },
                {
                  "value": "routeSummariesOnly",
                  "description": "Include only travel time and distance for the route, and do not provide other information. Only supported for route without waypoints."
                },
                {
                  "value": "regionTravelSummary",
                  "description": "Include travel summary of distance, time, and toll road distance by two entity types: country (e.g. US, Canada) and administrative division or subregion (e.g. “state” in US and “province” in Canada). `Note`:The parameter is available only for Driving and Walking travel mode"
                }
              ]
            }
          }
        },
        "isVehicleCommercial": {
          "description": "Whether the vehicle is used for commercial purposes. Commercial vehicles may not be allowed to drive on some roads.\n  `Note`: The parameter is available only for truck travel mode",
          "type": "boolean",
          "default": false
        },
        "maxRouteCount": {
          "description": "Number of maximal routes to be calculated. Default: 1, minimum: 1 and maximum: 3",
          "type": "integer",
          "minimum": 1,
          "maximum": 3
        },
        "vehicleSpec": {
          "description": "",
          "$ref": "#/definitions/VehicleSpec"
        }
      }
    },
    "RouteDirectionsResponse": {
      "description": "This object is returned from a successful CalculateRoute call",
      "type": "object",
      "properties": {
        "routes": {
          "description": "Routes array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Route"
          }
        }
      }
    },
    "Waypoint": {
      "description": "A route is defined by a set of waypoints",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "Latitude property",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "Longitude property",
          "type": "number",
          "format": "double"
        },
        "isViaWaypoint": {
          "description": "Specifies this is the viaWayPoint. `Note`:The parameter is available only for driving and walking mode.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "Route": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique ID for the resource.",
          "type": "string",
          "readOnly": true
        },
        "travelDistanceInMeters": {
          "description": "Length In Meters property",
          "type": "integer",
          "readOnly": true
        },
        "travelDurationInSeconds": {
          "description": "Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.",
          "type": "integer",
          "readOnly": true
        },
        "trafficDelayInSeconds": {
          "description": "Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes planned with departure time in the future, delays is always 0.",
          "type": "integer",
          "readOnly": true
        },
        "bbox": {
          "description": "Defines a rectangular area by using latitude and longitude boundaries that contain the corresponding route or location. A bounding box contains SouthLatitude, WestLongitude, NorthLatitude, and EastLongitude elements.",
          "type": "array",
          "readOnly": true,
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number"
          }
        },
        "trafficDataUsed": {
          "description": "Real-time traffic data used to generate the route.",
          "$ref": "#/definitions/TrafficDataUsed"
        },
        "trafficCongestion": {
          "description": "The level of traffic congestion along the route.",
          "$ref": "#/definitions/TrafficCongestion"
        },
        "routeLegs": {
          "description": "Legs array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteLeg"
          }
        },
        "routePath": {
          "description": "Route path array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RoutePath"
          }
        },
        "regionTravelSummary": {
          "description": "regionTravelSummary",
          "$ref": "#/definitions/RegionTravelSummary"
        }
      }
    },
    "RegionTravelSummary": {
      "description": "Travel summary of distance, time, and toll road distance by two entity types: country (e.g. US, Canada) and administrative division or subregion (e.g. “state” in US and “province” in Canada).",
      "properties": {
        "name": {
          "description": "Country name",
          "type": "string",
          "readOnly": true
        },
        "subregions": {
          "description": "SubRegions array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SubRegion"
          }
        }
      }
    },
    "SubRegion": {
      "description": "",
      "properties": {
        "name": {
          "description": "sub region name",
          "type": "string",
          "readOnly": true
        },
        "travelDistanceInMeters": {
          "description": "Length In Meters property",
          "type": "integer",
          "readOnly": true
        },
        "travelDurationInSeconds": {
          "description": "Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RouteLeg": {
      "description": "A description of a part of a route, comprised of a list of points. Each additional waypoint provided in the request will result in an additional leg in the returned route.",
      "type": "object",
      "properties": {
        "description": {
          "description": "A short description of the route.",
          "type": "string"
        },
        "travelDistanceInMeters": {
          "description": "The physical distance in meters covered by a route leg.",
          "type": "number",
          "readOnly": true
        },
        "travelDurationInSeconds": {
          "description": "Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.",
          "type": "integer",
          "readOnly": true
        },
        "departureTime": {
          "$ref": "#/definitions/DepartureTime"
        },
        "arrivalTime": {
          "$ref": "#/definitions/ArrivalTime"
        },
        "actualStart": {
          "description": "The Point (latitude and longitude) that was used as the actual starting location for the route leg. In most cases, the ActualStart is the same as the requested waypoint. However, if a waypoint is not close to a road, the Routes API chooses a location on the nearest road as the starting point of the route. This ActualStart element contains the latitude and longitude of this new location.",
          "properties": {
            "geometry": {
              "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonPoint"
            }
          }
        },
        "actualEnd": {
          "description": "The Point (latitude and longitude) that was used as the actual ending location for the route leg. In most cases, the ActualEnd is the same as the requested waypoint. However, if a waypoint is not close to a road, the Routes API chooses a location on the nearest road as the ending point of the route. This ActualEnd element contains the latitude and longitude of this new location.",
          "properties": {
            "geometry": {
              "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonPoint"
            }
          }
        },
        "routeSubLegs": {
          "description": "Sub Legs array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteSubLeg"
          }
        },
        "itineraryItems": {
          "description": "Itinerary array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ItineraryItem"
          }
        }
      }
    },
    "RouteSubLeg": {
      "description": "The physical distance covered by the sub-leg. The units are defined by the DistanceUnit field.",
      "properties": {
        "travelDistanceInMeters": {
          "description": "The physical distance in meters covered by a route leg.",
          "type": "number",
          "readOnly": true
        },
        "travelDurationInSeconds": {
          "description": "The time, in seconds, that it takes to travel the corresponding TravelDistance.",
          "type": "integer",
          "readOnly": true
        },
        "startWaypoint": {
          "$ref": "#/definitions/WaypointOutput"
        },
        "endWaypoint": {
          "$ref": "#/definitions/WaypointOutput"
        }
      }
    },
    "WaypointOutput": {
      "description": "These fields are found within the StartWaypoint and EndWaypoint collections of a RouteSubLeg.",
      "properties": {
        "geometry": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonPoint"
        },
        "description": {
          "description": "A short description identifying the waypoint.",
          "type": "string"
        },
        "isViaWaypoint": {
          "description": "A value of true indicates that this is a via-waypoint.",
          "type": "boolean"
        },
        "routePathIndex": {
          "description": "Specifies the route path point associated with the waypoint. You can get a list of route path points by setting the routeAttributes parameter to routePath.",
          "type": "integer"
        }
      }
    },
    "RoutePath": {
      "description": "A representation of the path of a route. A RoutePath is defined by a Line element that contains of a collection of latitude and longitude points. The path of the route is the line that connects these points. For more information about the fields contained in a route Path, see the Route Path Fields section below. A RoutePath is returned only if one of the following parameters is set in the request. \n\n routeAttributes=routePath",
      "properties": {
        "geometry": {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonLineString"
        }
      }
    },
    "ItineraryItem": {
      "description": "These fields are found in the ItineraryItem collection. Each itinerary item provides information about a route step.",
      "properties": {
        "compassDirection": {
          "description": "The direction of travel associated with a maneuver on a route, such as south or southwest.",
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/Details"
        },
        "exit": {
          "description": "The name or number of the exit associated with this itinerary step.",
          "type": "string"
        },
        "hints": {
          "description": "Additional information that may be helpful in following a route. In addition to the hint text, this element has an attribute hintType that specifies what the hint refers to, such as “NextIntersection.” Hint is an optional element and a route step can contain more than one hint.",
          "type": "string"
        },
        "instruction": {
          "description": "A description of a maneuver in a set of directions.",
          "$ref": "#/definitions/Instruction"
        },
        "maneuverPoint": {
          "description": "The coordinates of a point on the Earth where a maneuver is required, such as a left turn. A ManeuverPoint contains Latitude and Longitude elements.",
          "properties": {
            "geometry": {
              "$ref": "../../../Common/preview/1.0/common.json#/definitions/GeoJsonPoint"
            }
          }
        },
        "sideOfStreet": {
          "description": "sideOfStreet",
          "$ref": "#/definitions/SideOfStreet"
        },
        "signs": {
          "description": "Signage text for the route. There may be more than one sign value for an itinerary item.",
          "type": "string"
        },
        "towardsRoadName": {
          "description": "The name of the street that the route goes towards in the first itinerary item.",
          "type": "string"
        },
        "travelDistanceInMeters": {
          "description": "The physical distance in meters covered by this route step.",
          "type": "number"
        },
        "travelDurationInSeconds": {
          "description": "The time that it takes, in seconds, to travel a corresponding TravelDistance.",
          "type": "integer"
        }
      }
    },
    "Details": {
      "description": "Information about one of the maneuvers that is part of the itinerary item. An ItineraryItem can contain more than one Detail collection. For information about the fields contained in a Detail collection.",
      "properties": {
        "compassDegrees": {
          "description": "The direction in degrees.",
          "type": "number"
        },
        "maneuverType": {
          "description": "maneuverType",
          "$ref": "#/definitions/ManeuverType"
        },
        "names": {
          "description": "A street, highway or intersection where the maneuver occurs. If the maneuver is complex, there may be more than one name field in the details collection. The name field may also have no value. This can occur if the name is not known or if a street, highway or intersection does not have a name.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startPathIndices": {
          "description": "These fields specify index values for specific route path points that are returned in the response when a route path is returned. Together, these two index values define a range of route path points that correspond to a maneuver. Route path index values are integers where the first route path point has an index value of 0.",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "endPathIndices": {
          "description": "These fields specify index values for specific route path points that are returned in the response when a route path is returned. Together, these two index values define a range of route path points that correspond to a maneuver. Route path index values are integers where the first route path point has an index value of 0.",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "roadType": {
          "description": "type of road",
          "$ref": "#/definitions/RoadType"
        }
      }
    },
    "RouteDirectionsBatchResponse": {
      "description": "This object is returned from a successful Route Directions Batch service call.",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/BatchResult"
        }
      ],
      "properties": {
        "batchItems": {
          "description": "Array containing the batch results.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteDirectionsBatchResponseItem"
          }
        }
      }
    },
    "RouteDirectionsBatchResponseItem": {
      "description": "An item returned from Route Directions Batch service call.",
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../Common/preview/1.0/common.json#/definitions/BatchResultItem"
        }
      ],
      "properties": {
        "response": {
          "description": "The result of the query. RouteDirectionsResponse if the query completed successfully, ErrorResponse otherwise.",
          "type": "object",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/RouteDirectionsResponse"
            },
            {
              "$ref": "../../../../../common-types/data-plane/v1/types.json#/definitions/ErrorResponse"
            }
          ]
        }
      }
    },
    "DepartureTime": {
      "description": "The estimated departure time for the route or leg.",
      "type": "string",
      "readOnly": true,
      "format": "date-time"
    },
    "ArrivalTime": {
      "description": "The estimated arrival time for the route or leg.",
      "type": "string",
      "readOnly": true,
      "format": "date-time"
    },
    "TravelMode": {
      "description": "Travel mode for the calculated route",
      "type": "string",
      "readOnly": true,
      "enum": [
        "driving",
        "truck",
        "walking"
      ],
      "x-ms-enum": {
        "name": "TravelMode",
        "modelAsString": true,
        "values": [
          {
            "value": "driving",
            "description": "The returned routes are optimized for common driving scenarios."
          },
          {
            "value": "truck",
            "description": "The returned routes are optimized for trucks."
          },
          {
            "value": "walking",
            "description": "The returned routes are optimized for pedestrians, including the use of sidewalks."
          }
        ]
      }
    },
    "ManeuverType": {
      "description": "These fields are found in the ItineraryItem collection. Each itinerary item provides information about a route step.",
      "type": "string",
      "readOnly": true,
      "enum": [
        "ArriveFinish",
        "ArriveIntermediate",
        "BearLeft",
        "BearLeftThenBearLeft",
        "BearLeftThenBearRight",
        "BearLeftThenTurnLeft",
        "BearLeftThenTurnRight",
        "BearRight",
        "BearRightThenBearLeft",
        "BearRightThenBearRight",
        "BearRightThenTurnLeft",
        "BearRightThenTurnRight",
        "BearThenKeep",
        "BearThenMerge",
        "Continue",
        "DepartIntermediateStop",
        "DepartIntermediateStopReturning",
        "DepartStart",
        "EnterRoundabout",
        "ExitRoundabout",
        "EnterThenExitRoundabout",
        "KeepLeft",
        "KeepOnRampLeft",
        "KeepOnRampRight",
        "KeepOnRampStraight",
        "KeepRight",
        "KeepStraight",
        "KeepToStayLeft",
        "KeepToStayRight",
        "KeepToStayStraight",
        "Merge",
        "None",
        "RampThenHighwayLeft",
        "RampThenHighwayRight",
        "RampThenHighwayStraight",
        "RoadNameChange",
        "Take",
        "TakeRampLeft",
        "TakeRampRight",
        "TakeRampStraight",
        "TakeTransit",
        "Transfer",
        "TransitArrive",
        "TransitDepart",
        "TurnBack",
        "TurnLeft",
        "TurnLeftSharp",
        "TurnLeftThenBearLeft",
        "TurnLeftThenBearRight",
        "TurnLeftThenTurnLeft",
        "TurnLeftThenTurnRight",
        "TurnRight",
        "TurnRightSharp",
        "TurnRightThenBearLeft",
        "TurnRightThenBearRight",
        "TurnRightThenTurnLeft",
        "TurnRightThenTurnRight",
        "TurnThenMerge",
        "TurnToStayLeft",
        "TurnToStayRight",
        "Unknown",
        "UTurn",
        "Wait",
        "Walk"
      ],
      "x-ms-enum": {
        "name": "ManeuverType",
        "modelAsString": true,
        "values": [
          {
            "value": "ArriveFinish",
            "name": "ArriveFinish",
            "description": "Arrive at the final destination."
          },
          {
            "value": "ArriveIntermediate",
            "name": "ArriveIntermediate",
            "description": "Arrive at an intermediate waypoint."
          },
          {
            "value": "BearLeft",
            "name": "BearLeft",
            "description": "Bear left."
          },
          {
            "value": "BearLeftThenBearLeft",
            "name": "BearLeftThenBearLeft",
            "description": "Bear left and then bear left again."
          },
          {
            "value": "BearLeftThenBearRight",
            "name": "BearLeftThenBearRight",
            "description": "Bear left and then bear right."
          },
          {
            "value": "BearLeftThenTurnLeft",
            "name": "BearLeftThenTurnLeft",
            "description": "Bear left and then turn left."
          },
          {
            "value": "BearLeftThenTurnRight",
            "name": "BearLeftThenTurnRight",
            "description": "Bear left and then turn right."
          },
          {
            "value": "BearRight",
            "name": "BearRight",
            "description": "Bear right."
          },
          {
            "value": "BearRightThenBearLeft",
            "name": "BearRightThenBearLeft",
            "description": "Bear right and then bear left."
          },
          {
            "value": "BearRightThenBearRight",
            "name": "BearRightThenBearRight",
            "description": "Bear right and then bear right again."
          },
          {
            "value": "BearRightThenTurnLeft",
            "name": "BearRightThenTurnLeft",
            "description": "Bear right and then turn left."
          },
          {
            "value": "BearRightThenTurnRight",
            "name": "BearRightThenTurnRight",
            "description": "Bear right and then turn right."
          },
          {
            "value": "DepartStart",
            "name": "DepartStart",
            "description": "Leave the starting point."
          },
          {
            "value": "BearThenMerge",
            "name": "BearThenMerge",
            "description": "Bear instruction and then a merge instruction."
          },
          {
            "value": "Continue",
            "name": "Continue",
            "description": "Continue on the current road."
          },
          {
            "value": "DepartIntermediateStop",
            "name": "DepartIntermediateStop",
            "description": "Leave an intermediate waypoint in a different direction and road than you arrived on."
          },
          {
            "value": "DepartIntermediateStopReturning",
            "name": "DepartIntermediateStopReturning",
            "description": "Leave an intermediate waypoint in the same direction and on the same road that you arrived on."
          },
          {
            "value": "EnterRoundabout",
            "name": "EnterRoundabout",
            "description": "Enter a roundabout."
          },
          {
            "value": "ExitRoundabout",
            "name": "ExitRoundabout",
            "description": "Exit a roundabout."
          },
          {
            "value": "EnterThenExitRoundabout",
            "name": "EnterThenExitRoundabout",
            "description": "Enter and exit a roundabout."
          },
          {
            "value": "KeepLeft",
            "name": "KeepLeft",
            "description": "Keep left onto a different road."
          },
          {
            "value": "KeepOnRampLeft",
            "name": "KeepOnRampLeft",
            "description": "Keep left and continue onto ramp."
          },
          {
            "value": "KeepOnRampRight",
            "name": "KeepOnRampRight",
            "description": "Keep right and continue onto ramp."
          },
          {
            "value": "KeepOnRampStraight",
            "name": "KeepOnRampStraight",
            "description": "Keep straight and continue onto ramp."
          },
          {
            "value": "KeepRight",
            "name": "KeepRight",
            "description": "Keep right onto a different road."
          },
          {
            "value": "KeepStraight",
            "name": "KeepStraight",
            "description": "Keep straight onto a different road."
          },
          {
            "value": "KeepToStayLeft",
            "name": "KeepToStayLeft",
            "description": "Keep left to stay on the same road."
          },
          {
            "value": "KeepToStayRight",
            "name": "KeepToStayRight",
            "description": "Keep right to stay on the same road."
          },
          {
            "value": "KeepToStayStraight",
            "name": "KeepToStayStraight",
            "description": "Keep straight to stay on the same road."
          },
          {
            "value": "Merge",
            "name": "Merge",
            "description": "Merge onto a highway."
          },
          {
            "value": "None",
            "name": "None",
            "description": "No instruction."
          },
          {
            "value": "RampThenHighwayLeft",
            "name": "RampThenHighwayLeft",
            "description": "Take left ramp onto highway. This is part of a combined instruction."
          },
          {
            "value": "RampThenHighwayRight",
            "name": "RampThenHighwayRight",
            "description": "Take right ramp onto highway. This is part of a combined instruction."
          },
          {
            "value": "RampThenHighwayStraight",
            "name": "RampThenHighwayStraight",
            "description": "Stay straight to take ramp onto highway. This is part of a combined instruction."
          },
          {
            "value": "RoadNameChange",
            "name": "RoadNameChange",
            "description": "Road name changes."
          },
          {
            "value": "Take",
            "name": "Take",
            "description": "Take the road. This instruction is used when you are entering or exiting a ferry. For example the following two route instructions use the Take maneuver to tell the user to take the Seattle-Bainbridge ferry and then to exit the ferry onto Olympic Drive.\n Take Seattle-Bainbridge Ferry. Take Olympic Drive."
          },
          {
            "value": "TakeRampLeft",
            "name": "TakeRampLeft",
            "description": "Take ramp to the left."
          },
          {
            "value": "TakeRampRight",
            "name": "TakeRampRight",
            "description": "Take ramp to the right."
          },
          {
            "value": "TakeRampStraight",
            "name": "TakeRampStraight",
            "description": "Stay straight to take ramp."
          },
          {
            "value": "TakeTransit",
            "name": "TakeTransit",
            "description": "Take transit."
          },
          {
            "value": "Transfer",
            "name": "Transfer",
            "description": "Transfer between public transit at transit stop."
          },
          {
            "value": "TransitArrive",
            "name": "TransitArrive",
            "description": "Get off public transit at transit stop."
          },
          {
            "value": "TransitDepart",
            "name": "TransitDepart",
            "description": "Get on public transit at transit stop."
          },
          {
            "value": "TurnBack",
            "name": "TurnBack",
            "description": "Turn back sharply."
          },
          {
            "value": "TurnLeft",
            "name": "TurnLeft",
            "description": "Turn left."
          },
          {
            "value": "TurnLeftSharp",
            "name": "TurnLeftSharp",
            "description": "Take a sharp left turn."
          },
          {
            "value": "TurnLeftThenBearLeft",
            "name": "TurnLeftThenBearLeft",
            "description": "Turn left and then bear left."
          },
          {
            "value": "TurnLeftThenTurnRight",
            "name": "TurnLeftThenTurnRight",
            "description": "Turn left and then turn right."
          },
          {
            "value": "TurnRight",
            "name": "TurnRight",
            "description": "Turn right."
          },
          {
            "value": "TurnRightSharp",
            "name": "TurnRightSharp",
            "description": "Take a sharp right turn."
          },
          {
            "value": "TurnRightThenBearLeft",
            "name": "TurnRightThenBearLeft",
            "description": "Turn right and then bear left."
          },
          {
            "value": "TurnRightThenBearRight",
            "name": "TurnRightThenBearRight",
            "description": "Turn right and then bear right."
          },
          {
            "value": "TurnRightThenTurnLeft",
            "name": "TurnRightThenTurnLeft",
            "description": "Turn right and then turn left."
          },
          {
            "value": "TurnRightThenTurnRight",
            "name": "TurnRightThenTurnRight",
            "description": "Turn right and then turn right again"
          },
          {
            "value": "TurnThenMerge",
            "name": "TurnThenMerge",
            "description": "Turn instruction followed by a merge instruction."
          },
          {
            "value": "TurnToStayLeft",
            "name": "TurnToStayLeft",
            "description": "Turn left to stay on the same road."
          },
          {
            "value": "TurnToStayRight",
            "name": "TurnToStayRight",
            "description": "Turn right to stay on the same road."
          },
          {
            "value": "Unknown",
            "name": "Unknown",
            "description": "The instruction is unknown."
          },
          {
            "value": "UTurn",
            "name": "UTurn",
            "description": "Make a u-turn to go in the opposite direction."
          },
          {
            "value": "Wait",
            "name": "Wait",
            "description": "Wait"
          },
          {
            "value": "Walk",
            "name": "Walk",
            "description": "Walk"
          }
        ]
      }
    },
    "RoadType": {
      "description": "The type of road",
      "type": "string",
      "enum": [
        "NotApplicable",
        "LimitedAccessHighway",
        "Highway",
        "MajorRoad",
        "Arterial",
        "Street",
        "Ramp",
        "Ferry",
        "WalkingPath"
      ],
      "x-ms-enum": {
        "name": "RoadType",
        "modelAsString": true,
        "values": [
          {
            "value": "NotApplicable",
            "name": "NotApplicable",
            "description": "NotApplicable."
          },
          {
            "value": "LimitedAccessHighway",
            "name": "LimitedAccessHighway",
            "description": "LimitedAccessHighway."
          },
          {
            "value": "Highway",
            "name": "Highway",
            "description": "Highway."
          },
          {
            "value": "MajorRoad",
            "name": "MajorRoad",
            "description": "MajorRoad."
          },
          {
            "value": "Arterial",
            "name": "Arterial",
            "description": "Arterial."
          },
          {
            "value": "Street",
            "name": "Street",
            "description": "Street."
          },
          {
            "value": "Ramp",
            "name": "Ramp",
            "description": "Ramp."
          },
          {
            "value": "Ferry",
            "name": "Ferry",
            "description": "Ferry."
          },
          {
            "value": "WalkingPath",
            "name": "WalkingPath",
            "description": "WalkingPath."
          }
        ]
      }
    },
    "SideOfStreet": {
      "description": "The side of the street where the destination is found based on the arrival direction. This field applies to the last itinerary item only.",
      "type": "string",
      "enum": [
        "Left",
        "Right",
        "Unknown"
      ],
      "x-ms-enum": {
        "name": "SideOfStreet",
        "modelAsString": true,
        "values": [
          {
            "value": "Left",
            "name": "Left",
            "description": "Left."
          },
          {
            "value": "Right",
            "name": "Right",
            "description": "Right."
          },
          {
            "value": "Unknown",
            "name": "Unknown",
            "description": "Unknown."
          }
        ]
      }
    },
    "TrafficDataUsed": {
      "description": "The type of real-time traffic data used to generate the route.",
      "type": "string",
      "enum": [
        "None",
        "Flow",
        "Closure",
        "FlowAndClosure"
      ],
      "x-ms-enum": {
        "name": "TrafficDataUsed",
        "modelAsString": true,
        "values": [
          {
            "value": "None",
            "name": "None",
            "description": "None."
          },
          {
            "value": "Flow",
            "name": "Flow",
            "description": "Real-time traffic speeds used to calculate travel time."
          },
          {
            "value": "Closure",
            "name": "Closure",
            "description": "Real-time closure data used, if applicable."
          },
          {
            "value": "FlowAndClosure",
            "name": "FlowAndClosure",
            "description": "Flow and Closure."
          }
        ]
      }
    },
    "TrafficCongestion": {
      "description": "The level of traffic congestion along the route.",
      "type": "string",
      "enum": [
        "Unknown",
        "None",
        "Mild",
        "Medium",
        "Heavy"
      ],
      "x-ms-enum": {
        "name": "TrafficCongestion",
        "modelAsString": true,
        "values": [
          {
            "value": "Unknown",
            "name": "Unknown",
            "description": "Unknown."
          },
          {
            "value": "None",
            "name": "None",
            "description": "None."
          },
          {
            "value": "Mild",
            "name": "Mild",
            "description": "Mild."
          },
          {
            "value": "Medium",
            "name": "Medium",
            "description": "Medium."
          },
          {
            "value": "Heavy",
            "name": "Heavy",
            "description": "Heavy."
          }
        ]
      }
    },
    "Instruction": {
      "description": "A description of a maneuver in a set of directions.",
      "properties": {
        "maneuverType": {
          "$ref": "#/definitions/ManeuverType"
        },
        "text": {
          "description": "The plain text description of the instruction.",
          "type": "string"
        },
        "formattedText": {
          "description": "The formatted text description of the instruction.",
          "type": "string"
        }
      }
    },
    "VehicleSpec": {
      "description": "For truck routing, vehicle attributes are specified inside of a vehicleSpec object in POST requests. Different regions may have different definitions for the truck classification and types, e.g., light truck, medium truck, heavy truck, etc. To get the most accurate results of the route restrictions based on the truck specs, please specify the vehicle attributes.",
      "properties": {
        "heading": {
          "x-ms-client-name": "headingInDegrees",
          "description": "The directional heading of the vehicle in degrees starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359",
          "type": "integer",
          "minimum": 0,
          "maximum": 359
        },
        "length": {
          "x-ms-client-name": "lengthInMeters",
          "description": "Length of the vehicle in meters. A value of 0 means that length restrictions are not considered. `Note`: The parameter is available only for truck mode.",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "width": {
          "x-ms-client-name": "widthInMeters",
          "description": "Width of the vehicle in meters. A value of 0 means that width restrictions are not considered. `Note`: The parameter is available only for truck mode.",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "height": {
          "x-ms-client-name": "heightInMeters",
          "description": "Height of the vehicle in meters. A value of 0 means that height restrictions are not considered. `Note`: The parameter is available only for truck mode.",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "weight": {
          "x-ms-client-name": "weightInKilograms",
          "description": "Weight of the vehicle in kilograms. `Note`: The parameter is available only for truck travel mode.",
          "type": "integer",
          "default": 0
        },
        "maxSpeed": {
          "x-ms-client-name": "maxSpeedInKilometersPerHour",
          "description": "Maximum speed of the vehicle in km/hour. The max speed in the vehicle profile is used to check whether a vehicle is allowed on motorways. \n\n* A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning.\n\n* A non-zero value may be overridden during route planning. For example, the current traffic flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will again use 60 km/hour. `Note`: The parameter is available only for truck mode.",
          "type": "integer",
          "default": 0
        },
        "axleCount": {
          "description": "Number of axles of the vehicle. `Note`: The parameter is available only for truck mode.",
          "type": "integer",
          "default": 0
        },
        "axleWeight": {
          "x-ms-client-name": "axleWeightInKilograms",
          "description": "Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.`Note`: The parameter is available only for truck travel mode.",
          "type": "integer",
          "default": 0
        },
        "loadType": {
          "description": "Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. `Note`: The parameter is available only for truck mode.",
          "type": "string",
          "enum": [
            "USHazmatClass1",
            "USHazmatClass2",
            "USHazmatClass3",
            "USHazmatClass4",
            "USHazmatClass5",
            "USHazmatClass6",
            "USHazmatClass7",
            "USHazmatClass8",
            "USHazmatClass9",
            "otherHazmatExplosive",
            "otherHazmatGeneral",
            "otherHazmatHarmfulToWater"
          ],
          "x-ms-enum": {
            "name": "VehicleLoadType",
            "modelAsString": true,
            "values": [
              {
                "value": "USHazmatClass1",
                "description": "Explosives"
              },
              {
                "value": "USHazmatClass2",
                "description": "Compressed gas"
              },
              {
                "value": "USHazmatClass3",
                "description": "Flammable liquids"
              },
              {
                "value": "USHazmatClass4",
                "description": "Flammable solids"
              },
              {
                "value": "USHazmatClass5",
                "description": "Oxidizers"
              },
              {
                "value": "USHazmatClass6",
                "description": "Poisons"
              },
              {
                "value": "USHazmatClass7",
                "description": "Radioactive"
              },
              {
                "value": "USHazmatClass8",
                "description": "Corrosives"
              },
              {
                "value": "USHazmatClass9",
                "description": "Miscellaneous"
              },
              {
                "value": "otherHazmatExplosive",
                "description": "Explosives"
              },
              {
                "value": "otherHazmatGeneral",
                "description": "Miscellaneous"
              },
              {
                "value": "otherHazmatHarmfulToWater",
                "description": "Harmful to water"
              }
            ]
          }
        }
      }
    },
    "BatchRequest": {
      "description": "This type represents the request body for the Batch service.",
      "type": "object",
      "properties": {
        "batchItems": {
          "description": "The list of queries to process.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteDirectionsRequest"
          }
        }
      }
    }
  }
}
